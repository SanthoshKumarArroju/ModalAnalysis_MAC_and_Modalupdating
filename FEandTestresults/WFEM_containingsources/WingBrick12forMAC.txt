variables
%All of these actions are not the most efficient for this problem.
%t1=	28
%t2=	26
%t3=	24.021429
%t4=	21.964287
%t5=	19.828574
%t6=	17.61429
%t7=	15.321435
t1=	35
t2=	32.85
t3=	30.621429
t4=	28.314287
t5=	25.928574
t6=	23.46429
t7=	20.921435
t8=	18.300009



h=1778
b=63.61
l=285.94
%h=1511.3
%b=175.26
%l=304.8

element properties
% Beam format
% E G rho 
7.308e7 2.747e7 2.71e-6 
%aluminum(1:3)

%Note that these were defined above. I can use variables in my input file.
% I also used "steel" as a property. WFEM has some of these predefined. 
% Run "units" and type "who" to see variables/values available inside your
% input file

brick8_SL elements
%node1 node2 node3 pointnum (beam properties number)
1	2	8	7	4	5	11	10	1	1
7	8	14	13	10	11	17	16	1	1
13	14	20	19	16	17	23	22	1	1
19	20	26	25	22	23	29	28	1	1
25	26	32	31	28	29	35	34	1	1
31	32	38	37	34	35	41	40	1	1
37	38	44	43	40	41	47	46	1	1
38	39	45	44	41	42	48	47	1	1
32	33	39	38	35	36	42	41	1	1
26	27	33	32	29	30	36	35	1	1
20	21	27	26	23	24	30	29	1	1
14	15	21	20	17	18	24	23	1	1
8	9	15	14	11	12	18	17	1	1
2	3	9	8	5	6	12	11	1	1


nodes
% I can include comment lines
% node num, x y z, Node number isn't ever stored in nodes matrix
1	0 0 0
2	l/2 0 0
3	l 0 0
4       0 0 t1
5       l/2 0 t1
6      l 0 t1 
7       b/7 h/7 0
8       l/7 h/7 0
9       l-(b/7) h/7 0
10       b/7 h/7 t2
11       l/2 h/7 t2
12       l-(b/7) h/7 t2
13      2*(b/7) 2*(h/7) 0
14      l/2 2*(h/7) 0
15      l-(2*(b/7)) 2*(h/7) 0
16      2*(b/7) 2*(h/7) t3
17      l/2 2*(h/7) t3
18      l-(2*(b/7)) 2*(h/7) t3
19      3*(b/7) 3*(h/7) 0
20      l/2 3*(h/7) 0
21      l-(3*(b/7)) 3*(h/7) 0
22      3*(b/7) 3*(h/7) t4
23      l/2 3*(h/7) t4
24      l-(3*(b/7)) 3*(h/7) t4
25      4*(b/7) 4*(h/7) 0
26      l/2 4*(h/7) 0
27      l-(4*(b/7)) 4*(h/7) 0
28      4*(b/7) 4*(h/7) t5
29      l/2 4*(h/7) t5
30      l-(4*(b/7)) 4*(h/7) t5
31      5*(b/7) 5*(h/7) 0
32      l/2 5*(h/7) 0
33      l-(5*(b/7)) 5*(h/7) 0
34      5*(b/7) 5*(h/7) t6
35      l/2 5*(h/7) t6
36      l-(5*(b/7)) 5*(h/7) t6
37      6*(b/7) 6*(h/7) 0
38      l/2 6*(h/7) 0
39      l-(6*(b/7)) 6*(h/7) 0
40      6*(b/7) 6*(h/7) t7
41      l/2 6*(h/7) t7
42      l-(6*(b/7)) 6*(h/7) t7
43      7*(b/7) 7*(h/7) 0
44      l/2 7*(h/7) 0
45      l-(7*(b/7)) 7*(h/7) 0
46      7*(b/7) 7*(h/7) t8
47      l/2 7*(h/7) t8
48      l-(7*(b/7)) 7*(h/7) t8


% need to figure out what this block is for
points
1 1 1 1

fix clamp
1
2
3
4
5
6
7
8
% The preceeding put a clamp boundary condition on node 1.



%fix rod
%1 2 1
%2 3 1
%4 5 1
%5 6 1
%7 8 1
%8 9 1
%10 11 1
%11 12 1

load 
% Node DOF Force
%10 3 -10
%11 3 -10
%12 3 -10
%16 3 -10


actions
modalanalysis
who
fs %dump sorted natural frequencies to the screen
% The stuff inside actions is simply executed at the wfem prompt. Any
% Matlab command can also be executed here. For example, you could double
% the mass matrix then do another modal analysis. 
% This will display natural frequencies and prompt for mode shape display
%if uncommented
modalreview
fsold=fs %Let's store them for later comparison
M=M/4; %Dividing M by 4 should double the natural frequencies
fs=[]; % WFEM won't run another modal analysis unless I force it to 
%It's smart enough to know that it has already been done, so I need to 
%clear the results to it is forced to regenerate them with another
%modalanalysis.
modalanalysis
disp('Natural Frequencies in KHz')
fprintf('%7.3f %7.3f\n',[fsold'; fs'])
disp('See, the natural frequency doubled as expected') % I wrote this out 
%to the output for the user to read after execution.
% Uncommenting this line will cause an exit from WFEM immediately after 
% execution
%end
%Let's do static analysis
staticanalysis
plotdeformed
%Here are the %%displacements, X
%X
%[totalmass,INERTIATENSOR,CG]=FINDINERTIA
K
Kr
M
Mr

