variables
%All of these actions are not the most efficient for this problem.
t=0.2
l=2.5
Ixx1=1/12*t^4
Ixx2=1/12*(0.95*t)^4
Ixx3=1/12*(0.9*t)^4
Ixx4=1/12*(0.85*t)^4
Ixx5=1/12*(0.8*t)^4
Ixx6=1/12*(0.75*t)^4
Ixx7=1/12*(0.7*t)^4
Ixx8=1/12*(0.65*t)^4
Ixx9=1/12*(0.6*t)^4
Ixx10=1/12*(0.55*t)^4
Ixx11=1/12*(0.5*t)^4
Iyy1=Ixx1
Iyy2=Ixx2
Iyy3=Ixx3
Iyy4=Ixx4
Iyy5=Ixx5
Iyy6=Ixx6
Iyy7=Ixx7
Iyy8=Ixx8
Iyy9=Ixx9
Iyy10=Ixx10
Iyy11=Ixx11
J1=0.95*(Ixx1+Iyy1)
J2=0.95*(Ixx2+Iyy2)
J3=0.95*(Ixx3+Iyy3)
J4=0.95*(Ixx4+Iyy4)
J5=0.95*(Ixx5+Iyy5)
J6=0.95*(Ixx6+Iyy6)
J7=0.95*(Ixx7+Iyy7)
J8=0.95*(Ixx8+Iyy8)
J9=0.95*(Ixx9+Iyy9)
J10=0.95*(Ixx10+Iyy10)
J11=0.95*(Ixx11+Iyy11)


element properties
% Beam format
% E G rho A1  A2  J1 J2 Ixx1 Ixx2 Iyy1 Iyy2
steel    t^2 (0.95*t)^2 J1 J2 Ixx1 Ixx2 Iyy1 Iyy2
steel    (0.95*t)^2 (0.9*t)^2 J2 J3 Ixx2 Ixx3 Iyy2 Iyy3
steel    (0.9*t)^2 (0.85*t)^2 J3 J4 Ixx3 Ixx4 Iyy3 Iyy4
steel    (0.85*t)^2 (0.8*t)^2 J4 J5 Ixx4 Ixx5 Iyy4 Iyy5
steel    (0.8*t)^2 (0.75*t)^2 J5 J6 Ixx5 Ixx6 Iyy5 Iyy6
steel    (0.75*t)^2 (0.7*t)^2 J6 J7 Ixx6 Ixx7 Iyy6 Iyy7
steel    (0.7*t)^2 (0.65*t)^2 J7 J8 Ixx7 Ixx8 Iyy7 Iyy8
steel    (0.65*t)^2 (0.6*t)^2 J8 J9 Ixx8 Ixx9 Iyy8 Iyy9
steel    (0.6*t)^2 (0.55*t)^2 J9 J10 Ixx9 Ixx10 Iyy9 Iyy10
steel    (0.55*t)^2 (0.5*t)^2 J10 J11 Ixx10 Ixx11 Iyy10 Iyy11
%Note that these were defined above. I can use variables in my input file.
% I also used "steel" as a property. WFEM has some of these predefined. 
% Run "units" and type "who" to see variables/values available inside your
% input file

beam2_project1 elements
%node1 node2 node3 pointnum (beam properties number)
1 2 1 1
2 3 1 2
3 4 1 3
4 5 1 4
5 6 1 5 
6 7 1 6
7 8 1 7
8 9 1 8
9 10 1 9
10 11 1 10
 
nodes
% I can include comment lines
% node num, x y z, Node number isn't ever stored in nodes matrix
1 0 0 0 
2 0 l/10 0 
3 0 2*l/10 0 
4 0 3*l/10 0
5 0 4*l/10 0
6 0 5*l/10 0
7 0 6*l/10 0
8 0 7*l/10 0
9 0 8*l/10 0
10 0 9*l/10 0
11 0 l 0
% need to figure out what this block is for
points
1 1 1 1

fix clamp
1
% The preceeding put a clamp boundary condition on node 1.

load 
11 3 -1000

actions
modalanalysis
who
fs %dump sorted natural frequencies to the screen
% The stuff inside actions is simply executed at the wfem prompt. Any
% Matlab command can also be executed here. For example, you could double
% the mass matrix then do another modal analysis. 
% This will display natural frequencies and prompt for mode shape display
%if uncommented
%modalreview
fsold=fs %Let's store them for later comparison
M=M/4; %Dividing M by 4 should double the natural frequencies
fs=[]; % WFEM won't run another modal analysis unless I force it to 
%It's smart enough to know that it has already been done, so I need to 
%clear the results to it is forced to regenerate them with another
%modalanalysis.
modalanalysis
disp('Natural Frequencies in KHz')
fprintf('%7.3f %7.3f\n',[fsold'; fs'])
disp('See, the natural frequency doubled as expected') % I wrote this out 
%to the output for the user to read after execution.
% Uncommenting this line will cause an exit from WFEM immediately after 
% execution
%end
%Let's do static analysis
staticanalysis
plotdeformed
%Here are the displacements, X
X
